problem1:

int Set 1= [3, 1, 7, 9];
int Set 2=[2, 4, 1, 9, 3];
int n = set1.size(),m=set2.size();
    int sum = 0;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j <m; j++)
        {
            if (set2[j] != set1[i])
            {
                sum = set1[i]+set2[j];
            }
           
        }
    }
    printf("Sum of distinct Elements in the array is: " ,sum )
    

problem 2:
int dotProduct(int vect_A[], int vect_B[])
{
 
    int product = 0;
 
    // Loop for calculate dot product
    for (int i = 0; i < n; i++)
 
        product = product + vect_A[i] * vect_B[i];
    return product;
}
 
// Function to find
// cross product of two vector array.
void crossProduct(int vect_A[], int vect_B[], int cross_P[])
 
{
 
    cross_P[0] = vect_A[1] * vect_B[2] - vect_A[2] * vect_B[1];
    cross_P[1] = vect_A[2] * vect_B[0] - vect_A[0] * vect_B[2];
    cross_P[2] = vect_A[0] * vect_B[1] - vect_A[1] * vect_B[0];
}
 
// Driver function
int main()
{
 
    int vect_A[] = { 3, -5, 4 };
    int vect_B[] = { 2, 6, 5 };
    int cross_P[n];
 
    // dotProduct function call
    cout << "Dot product:";
    cout << dotProduct(vect_A, vect_B) << endl;
 
    // crossProduct function call
    cout << "Cross product:";
    crossProduct(vect_A, vect_B, cross_P);
 
    // Loop that print
    // cross product of two vector array.
    for (int i = 0; i < n; i++)
 
        cout << cross_P[i] << " ";
    return 0;
}